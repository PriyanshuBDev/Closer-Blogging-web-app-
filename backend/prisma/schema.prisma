// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id           String @id @default(uuid())
  email        String @unique
  name         String
  password     String
  posts        Post[]
  profile      Profile?
  likes        Like[]
  comments     Comment[]
  followers    Follow[] @relation("Followed")
  following    Follow[] @relation("Following")
  savedPosts   SavedPost[]
  createdAt    DateTime @default(now())
  sentNotification       Notification[] @relation("SentNotifications")
  receivedNotification   Notification[] @relation("ReceivedNotifications")
  verified     Boolean @default(false)
  verification EmailVerificationToken[]
}

model Profile{
  id           String @id @default(uuid())
  bio          String @default("")
  longBio      String @default("")
  imageUrl     String @default("https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y")

  user         User @relation(fields: [userId], references: [id])
  userId       String @unique
}

model Post{
  id           String @id @default(uuid())
  title        String 
  content      String
  published    Boolean @default(false)
  authorId     String
  author       User @relation(fields: [authorId], references: [id])
  createdAt    DateTime @default(now())
  imgUrl       String?
  updatedAt    DateTime @updatedAt @default(now())
  savedPosts   SavedPost[]
  tags         Tag[] @relation("PostTags")
  likes        Like[]
  comments     Comment[]
}

model Tag{
  id           String @id @default(uuid())
  name         String @unique
  posts        Post[] @relation("PostTags")
}

model Like {
  id           String @id @default(uuid())
  user         User @relation(fields: [userId], references: [id])
  userId       String 
  post         Post @relation(fields: [postId], references: [id])
  postId       String 
  createdAt    DateTime @default(now())
  @@unique([userId, postId])
}

model Comment{
  id           String @id @default(uuid())
  comment      String
  user         User  @relation(fields: [userId], references: [id])
  userId       String
  post         Post @relation(fields: [postId], references: [id])
  postId       String
  createdAt    DateTime @default(now())
  @@unique([userId, postId,comment])
}

model SavedPost{
  id           String @id @default(uuid())
  user         User @relation(fields: [userId], references: [id])
  userId       String 
  post         Post @relation(fields: [postId], references: [id])
  postId       String
  createdAt    DateTime @default(now())
  @@unique([userId, postId])
}

model Follow{
  id           String @id @default(uuid())
  follower     User @relation("Following", fields: [followerId], references: [id])
  followerId   String

  following    User  @relation("Followed", fields: [followingId], references: [id])
  followingId  String

  createdAt  DateTime @default(now())
  @@unique([followerId, followingId])
}

model Notification{
  id           String @id @default(uuid())
  type         String 
  message      String
  postId       String?
  senderId     String
  receiverId   String
  isRead       Boolean @default(false)
  createdAt    DateTime @default(now())

  sender       User    @relation("SentNotifications", fields: [senderId], references: [id])
  receiver     User    @relation("ReceivedNotifications", fields: [receiverId], references: [id])
}

model EmailVerificationToken {
  id          String @id @default(uuid())
  token       String @unique
  userId      String
  createdAt   DateTime @default(now())
  expiresAT   DateTime
  user        User @relation(fields: [userId], references: [id])
}